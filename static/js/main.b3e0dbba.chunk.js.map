{"version":3,"sources":["Common/CheckBox/MyCheckBox.module.css","Common/Button/MyButton.module.css","Common/Input/MyInput.module.css","Messages/Name/name.tsx","Messages/Text/text.tsx","Messages/Time/time.tsx","Messages/message.tsx","Common/Button/MyButton.tsx","Common/CheckBox/MyCheckBox.tsx","Todolist/Tododlist.tsx","Todolist/Affairs.tsx","Common/Input/MyInput.tsx","InputHello/Input.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Name","props","name","Text","text","Time","time","Message","className","src","MyButton","onClick","styleRed","s","buttonRed","button","title","MyCheckBox","label","type","checkbox","checked","onChange","e","changeStatus","currentTarget","fake","Todolist","tasks","map","t","key","id","p","newCheckBoxValue","removeTasks","changeFilter","Affairs","useState","affairs","setAffairs","filter","setFilter","tasksForTodoList","taskId","filteredTasks","newFilterValue","task","find","MyInput","error","inputError","input","value","onKeyPress","KeyPress","InputField","inputName","setInputName","names","setNames","setError","helloInput","alert","newName","newNames","v1","addInputName","length","Demonstration","Tasks","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b3e0dbba.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"MyCheckBox_label__2ahpY\",\"checkbox\":\"MyCheckBox_checkbox__1w0wK\",\"fake\":\"MyCheckBox_fake__1wjkr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"MyButton_button__36Ggp\",\"buttonRed\":\"MyButton_buttonRed__TQmNE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputError\":\"MyInput_inputError__3wsdT\",\"input\":\"MyInput_input__emNMN\"};","import React from 'react';\r\n\r\n\r\ntype NameType = {\r\n    name:string,\r\n}\r\n\r\nconst Name: React.FC<NameType> = (props: NameType) => {\r\n    return (\r\n        <div>{props.name}</div>\r\n    );\r\n}\r\n\r\nexport default Name;","import React from 'react';\r\n\r\ntype TextType = {\r\n    text: string,\r\n}\r\n\r\nconst Text:React.FC<TextType> = (props) => {\r\nreturn(\r\n    <div>{props.text}</div>\r\n);\r\n}\r\n\r\nexport default Text;","import React from 'react';\r\n\r\ntype timeType = {\r\n    time:string,\r\n}\r\n\r\nconst  Time: React.FC<timeType> = (props) => {\r\nreturn(\r\n    <div>{props.time}</div>\r\n);\r\n}\r\n\r\nexport default Time;","import React from 'react';\r\n\r\nimport Name from \"./Name/name\";\r\nimport Text from \"./Text/text\";\r\nimport Time from \"./Time/time\";\r\nimport './message.css';\r\n\r\n\r\nconst Message = () => {\r\n    return (\r\n        <div className='window'>\r\n\r\n                <img src='https://www.nj.com/resizer/h8MrN0-Nw5dB5FOmMVGMmfVKFJo=/450x0/smart/cloudfront-us-east-1.images.arcpublishing.com/advancelocal/SJGKVE5UNVESVCW7BBOHKQCZVE.jpg'/>\r\n\r\n            <div className='message'>\r\n                <div className='name'><Name name='Ignat'/></div>\r\n                <div className='text'><Text text='Hi, how are you?'/></div>\r\n                <div className='time'><Time time='22:26'/></div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from \"./MyButton.module.css\"\r\n\r\n type typeMyButton = {\r\n    title: string\r\n     onClick: () => void\r\n     styleRed: boolean\r\n}\r\n\r\n\r\n\r\nconst MyButton:React.FC<typeMyButton> = (props) => {\r\n    return (\r\n            <button onClick={props.onClick} className={props.styleRed? s.buttonRed : s.button}>{props.title}</button>\r\n    )\r\n}\r\n\r\nexport default MyButton;","import React, {ChangeEvent} from 'react';\r\nimport s from './MyCheckBox.module.css'\r\n\r\ntype myCheckBoxType = {\r\n    checked: boolean\r\n    changeStatus: (checked: boolean) => void\r\n}\r\n\r\nconst MyCheckBox: React.FC<myCheckBoxType> = (props) => {\r\n    return (\r\n        <label className={s.label}>\r\n            <input type=\"checkbox\"\r\n                   className={s.checkbox}\r\n                   checked={props.checked}\r\n                   onChange={ (e) => props.changeStatus(e.currentTarget.checked)}/>\r\n\r\n            <span className={s.fake}></span>\r\n        </label>\r\n\r\n    )\r\n}\r\n\r\nexport default MyCheckBox;","import React, {ChangeEvent} from 'react';\r\nimport {AffairsType, FilterValuesType} from \"./Affairs\";\r\nimport MyButton from \"../Common/Button/MyButton\";\r\nimport MyCheckBox from \"../Common/CheckBox/MyCheckBox\";\r\n\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<AffairsType>,\r\n    removeTasks: (taskId: number) => void,\r\n    changeFilter: (newFilterValue: FilterValuesType) => void,\r\n    changeStatus: (id: number, p: boolean) => void\r\n\r\n}\r\n\r\n\r\n\r\nexport function Todolist(props: PropsType ){\r\n\r\n    let allClick = () => {props.changeFilter(\"all\")};\r\n    let activeClick = () => {props.changeFilter(\"active\")};\r\n    let completedClick = () => {props.changeFilter(\"completed\")};\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>Affairs</h3>\r\n            <ul>\r\n                {props.tasks.map((t)=>{\r\n                    let deleteClick = () =>{props.removeTasks(t.id)}\r\n                    let changeStatus = (checked: boolean) => {\r\n                        let newCheckBoxValue = checked;\r\n                        props.changeStatus(t.id, newCheckBoxValue)\r\n                    }\r\n                    return (\r\n                        <li key={t.id} className={\"liTodo\"}>\r\n                            {/*<input type=\"checkbox\" checked={t.p}/>*/}\r\n                            <MyCheckBox checked={t.p} changeStatus={changeStatus}/>\r\n\r\n                            <span>{t.title}</span>\r\n                            <MyButton title={\"x\"} onClick={deleteClick} styleRed={true}/>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n            <div>\r\n                <MyButton title={\"all\"} onClick={allClick} styleRed={false}/>\r\n                <MyButton title={\"active\"} onClick={activeClick} styleRed={false}/>\r\n                <MyButton title={\"completed\"} onClick={completedClick} styleRed={false}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport {Todolist} from \"./Tododlist\";\r\n\r\nexport type AffairsType = {\r\n    id: number\r\n    title: string\r\n    p: boolean\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\n\r\nfunction Affairs() {\r\n    let [affairs, setAffairs] = useState([\r\n        {id: 1, title: \"работа\", p: true},\r\n        {id: 2, title: \"аниме\", p: false},\r\n        {id: 3, title: \"игры\", p: false},\r\n        {id: 4, title: \"реакт\", p: true},\r\n        {id: 5, title: \"хтмл\", p: true}\r\n    ]);\r\n\r\n    let  [filter, setFilter] = useState<FilterValuesType>(\"all\")\r\n\r\n\r\n    function removeTask(taskId: number) {\r\n        let filteredTasks = affairs.filter((t) => t.id !== taskId)\r\n        setAffairs(filteredTasks);\r\n    }\r\n\r\n    function changeFilter(newFilterValue: FilterValuesType) {\r\n        setFilter(newFilterValue);\r\n    }\r\n\r\n    function changeStatus(id: number, p: boolean) {\r\n      let  task = affairs.find(t => t.id === id);\r\n      if (task) {\r\n          task.p = p;\r\n          setAffairs([...affairs]);\r\n      }\r\n\r\n    }\r\n\r\n\r\n    let tasksForTodoList = affairs;\r\n    if(filter === \"active\"){\r\n        tasksForTodoList = affairs.filter(t => t.p === false)\r\n    }\r\n\r\n    if (filter === \"completed\") {\r\n        tasksForTodoList = affairs.filter(t => t.p === true)\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Todolist\r\n                title={\"To-do list\"}\r\n                tasks={tasksForTodoList}\r\n                removeTasks={removeTask}\r\n                changeFilter={changeFilter}\r\n                changeStatus={changeStatus}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Affairs;","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\nimport s from './MyInput.module.css'\r\n\r\ntype inputPropsType = {\r\n    value: string\r\n    onChange: (value: string) => void\r\n    KeyPress: (e: KeyboardEvent<HTMLInputElement>) => void\r\n    error: boolean\r\n}\r\n\r\nconst MyInput: React.FC<inputPropsType> = (props) => {\r\n\r\n    return(\r\n        <div className={\"myInput\"}>\r\n            <input\r\n                className={props.error? s.inputError : s.input}\r\n                type= \"text\"\r\n                value={props.value}\r\n                onChange={(e)=> props.onChange(e.currentTarget.value)}\r\n                onKeyPress={props.KeyPress}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyInput;","import React, {useState, ChangeEvent, KeyboardEvent} from \"react\";\r\nimport {v1} from \"uuid\";\r\nimport MyInput from \"../Common/Input/MyInput\";\r\nimport MyButton from \"../Common/Button/MyButton\";\r\n\r\ntype newNames = { id: string, name: string }\r\n\r\nexport function InputField() {\r\n\r\n    let [inputName, setInputName] = useState(\"\");\r\n\r\n    let [names, setNames] = useState<Array<newNames>>([])\r\n\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    function addInputName(newName: string) {\r\n        let newInputName = {id: v1(), name: newName};\r\n        let newNames = [newInputName, ...names];\r\n        setNames(newNames)\r\n    }\r\n\r\n\r\n    function onHelloInputChanget(value: string) {\r\n        setInputName(value);\r\n        setError(false)\r\n    }\r\n\r\n    function onHelloInputKeyPressed(e: KeyboardEvent<HTMLInputElement>) {\r\n        if (e.key === \"Enter\")\r\n            helloInput();\r\n\r\n\r\n    }\r\n\r\n    function helloInput() {\r\n        if (inputName != \"\") {\r\n            alert(`hello ${inputName}`);\r\n            setInputName(\"\");\r\n            addInputName(inputName)\r\n        } else {\r\n            setError(true)\r\n            alert(\"введите текст\")\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <MyInput value = {inputName} onChange={onHelloInputChanget} KeyPress={onHelloInputKeyPressed} error={error}/>\r\n            <MyButton title={\"hello\"} onClick={helloInput} styleRed={false}/>\r\n            <div> Количество пользователей: {names.length} </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport Messages from \"./Messages/message\";\nimport Affairs from \"./Todolist/Affairs\";\nimport { InputField } from './InputHello/Input';\nimport MyButton from \"./Common/Button/MyButton\";\nimport MyCheckBox from './Common/CheckBox/MyCheckBox';\nimport MyInput from './Common/Input/MyInput';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Tasks />\n      <Affairs/>\n      <InputField/>\n    </div>\n  );\n}\n\n\nconst Demonstration = () => {\n    return (\n        <div className={\"demonstration\"}>\n            <MyButton title={\"demonstration\"} onClick={() => {} } styleRed={false}/>\n            <MyCheckBox checked={true} changeStatus={ () => {} }/>\n            <MyInput value={\"demonstration\"} KeyPress={ (e) => { }  } onChange={ () => {} } error={false}/>\n        </div>\n    )\n}\n\n\n\n\nfunction Tasks() {\n  return (\n    <div>\n        < Messages/>\n        <Demonstration/>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}